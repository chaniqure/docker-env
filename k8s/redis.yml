kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: redis
  namespace: user
  labels:
    app: redis
  annotations:
    kubesphere.io/creator: admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis
      annotations:
        kubesphere.io/creator: admin
        logging.kubesphere.io/logsidecar-config: '{}'
    spec:
      volumes:
        - name: volume-ctd9fu
          configMap:
            name: env
            items:
              - key: redis.conf
                path: redis.conf
            defaultMode: 420
        - name: data-path
          hostPath:
            path: /mnt/redis
            type: ''
      containers:
        - name: redis
          image: redis
          command:
            - redis-server
            - /usr/local/redis/redis.conf
          ports:
            - name: tcp-6379
              containerPort: 6379
              protocol: TCP
          resources:
            limits:
              memory: 100Mi
          volumeMounts:
            - name: volume-ctd9fu
              readOnly: true
              mountPath: /usr/local/redis/redis.conf
              subPath: redis.conf
            - name: data-path
              mountPath: /data
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: default
      serviceAccount: default
      securityContext: {}
      schedulerName: default-scheduler
  serviceName: redis
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
---
kind: Service
apiVersion: v1
metadata:
  name: redis
  namespace: user
  labels:
    app: redis
  annotations:
    kubesphere.io/creator: admin
spec:
  ports:
    - name: http-6379
      protocol: TCP
      port: 6379
      targetPort: 6379
      nodePort: 6379
  selector:
    app: redis
  type: NodePort
  sessionAffinity: None
  externalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  internalTrafficPolicy: Cluster
